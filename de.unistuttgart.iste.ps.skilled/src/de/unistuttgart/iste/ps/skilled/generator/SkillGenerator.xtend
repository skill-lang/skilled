/*
 * generated by Xtext
 */
package de.unistuttgart.iste.ps.skilled.generator

import java.io.File
import java.util.Collections
import org.eclipse.core.resources.IProject
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.FileLocator
import org.eclipse.core.runtime.Path
import org.eclipse.core.runtime.Platform
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import de.unistuttgart.iste.ps.skilled.tools.SIRCache

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 * 
 * @author Timm Felden
 * 
 * @note this is what the others did, but I am quite certain that we need to update the sir-file before calling the generators
 */
class SkillGenerator implements IGenerator {
	private def IProject getProject(Resource resource) {
		try {
			val String platformString = resource.getURI.toPlatformString(false)
			return ResourcesPlugin.getWorkspace.getRoot.getFile(new Path(platformString)).getProject
		} catch (IllegalStateException e) {
			return null
		}
	}

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val project = getProject(resource);
		if (null == project)
			return;

		val jarLocation = FileLocator.resolve(
			FileLocator.find(Platform.getBundle("de.unistuttgart.iste.ps.skilled"), new Path("lib/skill-0.3.jar"),
				Collections.emptyMap()));

		val sf = SIRCache.ensureFile(project)

		for (tool : sf.Tools) {
			val pb = new ProcessBuilder("java", "-jar", jarLocation.getPath(), ".sir", "-t", tool.getName(), "-b");

			pb.directory(new File(project.getLocationURI()));
			pb.start().waitFor();
		}
	}
}
