/*
 * generated by Xtext
 */
package de.unistuttgart.iste.ps.skilled.formatting2;

import com.google.inject.Inject
import de.unistuttgart.iste.ps.skilled.sKilL.Arraytype
import de.unistuttgart.iste.ps.skilled.sKilL.Basetype
import de.unistuttgart.iste.ps.skilled.sKilL.Constant
import de.unistuttgart.iste.ps.skilled.sKilL.Data
import de.unistuttgart.iste.ps.skilled.sKilL.Declaration
import de.unistuttgart.iste.ps.skilled.sKilL.Enumtype
import de.unistuttgart.iste.ps.skilled.sKilL.Field
import de.unistuttgart.iste.ps.skilled.sKilL.File
import de.unistuttgart.iste.ps.skilled.sKilL.Hint
import de.unistuttgart.iste.ps.skilled.sKilL.HintArgument
import de.unistuttgart.iste.ps.skilled.sKilL.Include
import de.unistuttgart.iste.ps.skilled.sKilL.IncludeFile
import de.unistuttgart.iste.ps.skilled.sKilL.Interfacetype
import de.unistuttgart.iste.ps.skilled.sKilL.Listtype
import de.unistuttgart.iste.ps.skilled.sKilL.Maptype
import de.unistuttgart.iste.ps.skilled.sKilL.Restriction
import de.unistuttgart.iste.ps.skilled.sKilL.RestrictionArgument
import de.unistuttgart.iste.ps.skilled.sKilL.Settype
import de.unistuttgart.iste.ps.skilled.sKilL.TypeDeclarationReference
import de.unistuttgart.iste.ps.skilled.sKilL.Typedef
import de.unistuttgart.iste.ps.skilled.sKilL.Usertype
import de.unistuttgart.iste.ps.skilled.services.SKilLGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion

/**
 * TODO Comments!
 * @author Marco Link
 */
class SKilLFormatter extends AbstractFormatter2 {

	@Inject extension SKilLGrammarAccess

	def dispatch void format(File file, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		for (ISemanticRegion isr : file.regionsForRuleCallsTo(HEADCOMMENTRule)) {
			if (isr.equals(file.headComments.last)) {
				isr.prepend[noSpace].append[newLines = 2]
			} else {
				isr.prepend[noSpace].append[newLine]
			}
		}

		for (Include includes : file.getIncludes()) {
			format(includes, document);
		}
		for (Declaration declarations : file.getDeclarations()) {
			format(declarations, document);
		}

	}

	def dispatch void format(Include include, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		include.regionForKeyword('include').prepend[noSpace].append[oneSpace]
		include.regionForKeyword('with').prepend[noSpace].append[oneSpace]
		for (IncludeFile includeFiles : include.getIncludeFiles()) {
			format(includeFiles, document);
		}
		include.append[newLines = 2]
	}

	def dispatch void format(Typedef typedef, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		typedef.prepend[noSpace]
		typedef.regionForKeyword('typedef').append[oneSpace]

		for (Restriction restrictions : typedef.getRestrictions()) {
			restrictions.prepend[newLine; increaseIndentation]
			format(restrictions, document);
			restrictions.append[decreaseIndentation]
		}
		for (Hint hints : typedef.getHints()) {
			hints.prepend[newLine; increaseIndentation]
			format(hints, document);
			hints.append[decreaseIndentation]
		}
		typedef.fieldtype.prepend[increaseIndentation]
		format(typedef.getFieldtype(), document);
		typedef.fieldtype.append[decreaseIndentation]
		typedef.regionForKeyword(";").prepend[noSpace].append[newLines = 2]
	}

	def dispatch void format(Enumtype enumtype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		enumtype.prepend[noSpace]
		if ((enumtype.fields.size > 0) || (enumtype.instances.size > 0)) {
			enumtype.regionForKeyword("{").prepend[oneSpace].append[newLine; increaseIndentation]
			enumtype.regionForKeyword("}").prepend[decreaseIndentation].append[newLines = 2]
		} else {
			enumtype.regionForKeyword("{").prepend[oneSpace].append[noSpace]
			enumtype.regionForKeyword("}").prepend[noSpace].append[newLines = 2]
		}
		for (Field fields : enumtype.getFields()) {
			format(fields, document);
		}
	}

	def dispatch void format(Interfacetype interfacetype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		interfacetype.prepend[noSpace]
		if (interfacetype.fields.size > 0) {
			interfacetype.regionForKeyword("{").prepend[oneSpace].append[newLine; increaseIndentation]
			interfacetype.regionForKeyword("}").prepend[decreaseIndentation].append[newLines = 2]
		} else {
			interfacetype.regionForKeyword("{").prepend[oneSpace].append[noSpace]
			interfacetype.regionForKeyword("}").prepend[noSpace].append[newLines = 2]
		}
		for (TypeDeclarationReference supertypes : interfacetype.getSupertypes()) {
			format(supertypes, document);
		}
		for (Field fields : interfacetype.getFields()) {
			format(fields, document);
		}

	}

	def dispatch void format(Usertype usertype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		usertype.prepend[noSpace]
		if (usertype.fields.size > 0) {
			usertype.regionForKeyword("{").prepend[oneSpace].append[newLine; increaseIndentation]
			usertype.regionForKeyword("}").prepend[decreaseIndentation].append[newLines = 2]
		} else {
			usertype.regionForKeyword("{").prepend[oneSpace].append[noSpace]
			usertype.regionForKeyword("}").prepend[noSpace].append[newLines = 2]
		}

		for (Restriction restrictions : usertype.getRestrictions()) {
			format(restrictions, document);
		}
		for (Hint hints : usertype.getHints()) {
			format(hints, document);
		}
		for (TypeDeclarationReference supertypes : usertype.getSupertypes()) {
			format(supertypes, document);
		}
		for (Field fields : usertype.getFields()) {
			format(fields, document);
		}
	}

	def dispatch void format(Field field, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		field.prepend[noSpace]
		for (Restriction restrictions : field.getRestrictions()) {
			format(restrictions, document);
		}
		for (Hint hints : field.getHints()) {
			format(hints, document);
		}
		format(field.getFieldcontent(), document);
		field.regionForKeyword(";").append[newLine]
	}

	def dispatch void format(Restriction restriction, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		restriction.regionForKeyword("@").surround[noSpace]
		for (RestrictionArgument restrictionArguments : restriction.getRestrictionArguments()) {
			format(restrictionArguments, document);
		}
		restriction.regionForKeyword("(").surround[noSpace]
		restriction.regionForKeyword(")").surround[noSpace]
		restriction.regionForKeyword(",").prepend[noSpace].append[oneSpace]
		restriction.append[newLine]
	}

	def dispatch void format(Hint hint, extension IFormattableDocument document) {
		hint.regionForKeyword("!").surround[noSpace]
		for (HintArgument hintArguments : hint.getHintArguments()) {
			format(hintArguments, document);
		}
		hint.regionForKeyword("(").surround[noSpace]
		hint.regionForKeyword(")").surround[noSpace]
		hint.regionForKeyword(",").prepend[noSpace].append[oneSpace]
		hint.append[newLine]
	}

	def dispatch void format(Constant constant, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		constant.surround[noSpace]
		constant.regionForKeyword("const").append[oneSpace]
		format(constant.getFieldtype(), document);
	}

	def dispatch void format(Data data, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		data.surround[noSpace]
		format(data.getFieldtype(), document);
	}

	def dispatch void format(Maptype maptype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		maptype.prepend[oneSpace].append[noSpace]
		maptype.regionForKeyword("<").surround[noSpace]
		maptype.regionForKeyword(">").surround[noSpace]
		for (Basetype basetypes : maptype.getBasetypes()) {
			format(basetypes, document);
		}
	}

	def dispatch void format(Settype settype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		settype.prepend[oneSpace].append[noSpace]
		settype.regionForKeyword("<").surround[noSpace]
		settype.regionForKeyword(">").surround[noSpace]
		format(settype.getBasetype(), document);
	}

	def dispatch void format(Listtype listtype, extension IFormattableDocument document) {
		listtype.prepend[oneSpace].append[noSpace]
		listtype.regionForKeyword("<").surround[noSpace]
		listtype.regionForKeyword(">").surround[noSpace]
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(listtype.getBasetype(), document);
	}

	def dispatch void format(Arraytype arraytype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		arraytype.regionForKeyword("[").surround[noSpace]
		arraytype.regionForKeyword("]").surround[noSpace]
		format(arraytype.getBasetype(), document);
	}
}
