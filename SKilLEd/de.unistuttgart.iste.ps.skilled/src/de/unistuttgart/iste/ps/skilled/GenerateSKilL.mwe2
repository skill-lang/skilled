/**
 * @author Marco Link - Only customized to work better with SKilL.
 */
module de.unistuttgart.iste.ps.skilled.GenerateSKilL

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "de.unistuttgart.iste.ps.skilled"
var grammarURI = "platform:/resource/${projectName}/src/de/unistuttgart/iste/ps/skilled/SKilL.xtext"
var fileExtensions = "skill"
var runtimeProject = "../${projectName}"
var generateXtendStub = true
var encoding = "UTF-8"

Workflow {
	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/model/generated"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.tests/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		encoding = encoding
		language = auto-inject {
			uri = grammarURI

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// case insensitive
			// The antlr parser generator fragment.
			fragment = parser.antlr.ex.rt.AntlrGeneratorFragment {
				options = {
					ignoreCase = true
				}
			}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment auto-inject {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
			}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment auto-inject {
				ignoreCase = true
			}

			fragment = exporting.QualifiedNamesFragment auto-inject {}
			fragment = builder.BuilderIntegrationFragment auto-inject {}

			// generator API
			fragment = generator.GeneratorFragment auto-inject {}

			// new formatter API
			fragment = formatting2.Formatter2Fragment auto-inject {}

			// labeling API
			fragment = labeling.LabelProviderFragment auto-inject {}

			// outline API
			fragment = outline.OutlineTreeProviderFragment auto-inject {}
			fragment = outline.QuickOutlineFragment auto-inject {}

			// quickfix API
			fragment = quickfix.QuickfixProviderFragment auto-inject {}

			// content assist API
			fragment = contentAssist.ContentAssistFragment auto-inject {}

			// case insensitive
			// generates a more lightweight ANTLR parser and lexer tailored ...
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}

			// provides a preference page for template proposals
			fragment = templates.CodetemplatesGeneratorFragment auto-inject {}

			// provides a compare view
			fragment = compare.CompareFragment auto-inject {}

			// rename refactoring
			fragment = refactoring.RefactorElementNameFragment auto-inject {}
		}
	}
}

