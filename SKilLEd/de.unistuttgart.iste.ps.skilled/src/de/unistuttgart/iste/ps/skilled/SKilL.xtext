/** 
 * Xtext grammar for SKilL
 * 
 * @author Marco Link and Nikolay Fateev
 */
grammar de.unistuttgart.iste.ps.skilled.SKilL hidden(WHITESPACE)

generate sKilL "http://www.unistuttgart.de/iste/ps/skilled/SKilL"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

File:
	(headComments+=HEADCOMMENT)* (includes+=Include)* (declarations+=Declaration)*;

Include:
	('include' | 'with') (includeFiles+=IncludeFile)+;

IncludeFile:
	importURI=STRING;

Declaration:
	Typedef | Enumtype | TypeDeclaration;

/* A "Goto" link */
DeclarationReference:
	type=[Declaration];

	// Restricts that only interfaces and usertypes can be supertypes.
TypeDeclaration:
	Interfacetype | Usertype;

	// This indirection is needed for semantic syntax coloring.
TypeDeclarationReference:
	type=[TypeDeclaration];

Typedef:
	comment=ML_COMMENT? 'typedef' name=ID
	(restrictions+=Restriction | hints+=Hint)* fieldtype=Fieldtype ';';

Enumtype:
	comment=ML_COMMENT?
	'enum' name=ID '{' instances+=Enuminstance (',' instances+=Enuminstance)* ';' (fields+=Field)* '}';

Enuminstance:
	name=XID;

Interfacetype:
	comment=ML_COMMENT?
	'interface' name=ID ((':' | 'with' | 'extends') (supertypes+=TypeDeclarationReference))*
	'{' (fields+=Field)* '}';

Usertype:
	comment=ML_COMMENT? (restrictions+=Restriction | hints+=Hint)*
	name=ID ((':' | 'with' | 'extends') (supertypes+=TypeDeclarationReference))*
	'{' (fields+=Field)* '}';

Field:
	comment=ML_COMMENT? (restrictions+=Restriction | hints+=Hint)*
	fieldcontent=Fieldcontent ';';

Fieldcontent:
	View | Constant | Data;

	// Again needed for syntax coloring and it uses qualified names because of the views notation.
FieldcontentReference:
	fieldcontent=[Fieldcontent|QualifiedName];

View:
	'view' fieldcontent=FieldcontentReference 'as' fieldtype=Fieldtype name=XID;

Constant:
	constantName='const' fieldtype=Fieldtype name=XID '=' value=(LongLiteral | HEXINT);

Data:
	(isAuto?='auto')? fieldtype=Fieldtype name=XID;

Fieldtype:
	Maptype | Settype | Listtype | Arraytype | Basetype;

Maptype:
	'map' '<' basetypes+=Basetype (',' basetypes+=Basetype)+ '>';

Settype:
	'set' '<' basetype=Basetype '>';

Listtype:
	'list' '<' basetype=Basetype '>';

Arraytype:
	basetype=Basetype ('[' (length=(LongLiteral | HEXINT))? ']');

Basetype:
	DeclarationReference | BuiltInType;

BuiltInType:
	Integertype | Floattype | Stringtype | Annotationtype | Booleantype;

Integertype:
	type=Integer;

enum Integer:
	I8='i8' | I16='i16' | I32='i32' | I64='i64' | V64='v64';

Floattype:
	type=Float;

enum Float:
	F32='f32' | F64='f64';

Stringtype:
	type='string';

Annotationtype:
	type='annotation';

Booleantype:
	type='bool';

Restriction:
	'@' restrictionName=ID ('(' (restrictionArguments+=RestrictionArgument (','
	restrictionArguments+=RestrictionArgument)*)? ')')?;

RestrictionArgument:
	(valueDouble=DoubleLiteral | valueLong=(LongLiteral | HEXINT) | valueString=STRING | valueBoolean=Boolean |
	valueType=DeclarationReference (('.' | '::') enumInstance=XID)?);

Hint:
	'!' hintName=ID ('(' (hintArguments+=HintArgument (',' hintArguments+=HintArgument)*)? ')')?;

HintArgument:
	(valueDouble=DoubleLiteral | valueLong=(LongLiteral | HEXINT) | valueString=STRING | valueIdentifier=ID);

LongLiteral returns ecore::ELongObject:
	LONG;

DoubleLiteral returns ecore::EDoubleObject:
	DOUBLE;

terminal fragment DIGIT:
	'0'..'9';

terminal fragment HEX_DIGIT:
	(DIGIT | 'a'..'f' | 'A'..'F');

terminal fragment ALPHANUM:
	('a'..'z' | 'A'..'Z' | '_' | DIGIT);

terminal STRING:
	'"'->'"';

terminal HEADCOMMENT:
	'#' !('\r' | '\n')* (('\r'? '\n') | EOF);

terminal ID:
	('a'..'z' | 'A'..'Z' | '_' | '\u007f'..'\uffff') (ALPHANUM | '\u007f'..'\uffff')*;

enum Boolean:
	TRUE='true' | FALSE='false';

XID:
	ID | 'auto' | 'include' | 'with' | 'typedef' | 'enum' | 'interface' | 'extends' | 'const' | 'map' | 'set' | 'list' |
	'string' | 'bool' | 'annotation' | 'true' | 'false';

QualifiedName:
	(XID ('.' XID)?);

terminal HEXINT returns ecore::ELongObject:
	'-'? '0x' (HEX_DIGIT)+;

terminal LONG returns ecore::ELong:
	'-'? DIGIT+;

terminal DOUBLE returns ecore::EDouble:
	((LONG EXPONENT) | (LONG? '.' DIGIT+ EXPONENT?)) ('f' | 'F' | 'd' | 'D')?;

terminal EXPONENT:
	('e' | 'E') ('+' | '-')? DIGIT+;

terminal ML_COMMENT:
	'/*'->'*/';

terminal WHITESPACE:
	(' ' | '\t' | '\r' | '\n')+;

terminal ANY_OTHER:
	.;