/** 
 * Xtext grammar for SKilL (NOT FINISHED YET)
 * TODO: Add missing stuff and replace predefined Terminals.
 * @author Marco Link
 */

grammar de.unistuttgart.iste.ps.skilled.SKilL hidden (WHITESPACE)
generate sKilL "http://www.unistuttgart.de/iste/ps/skilled/SKilL"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


File:
	(headComments += HEADCOMMENT)* (includes += Include)*  (declarations += Declaration)*
;

Include:
	('include' | 'with') (includeFiles += IncludeFile)+
;

IncludeFile:
	importURI = STRING
;

Declaration:
	Typedef |  Enumtype | Interfacetype | Usertype 
;

Typedef:
	comment = ML_COMMENT? 'typedef' name = ID 
	(restrictions += Restriction | hints += Hint)* fieldtype = Fieldtype ';'
;

Enumtype : 
	comment = ML_COMMENT? 
	'enum' name = ID '{' instances += ID (',' instances += ID)* ';' (fields += Field)* '}'
;

Interfacetype:
	comment = ML_COMMENT? 
	'interface' name = ID ((':' | 'with' | 'extends') (supertypes += DeclarationReference))*
	'{' (fields += Field)* '}'
;

Usertype:
	comment = ML_COMMENT? (restrictions += Restriction | hints += Hint)* 
	name = ID ((':' | 'with' | 'extends') (supertypes += DeclarationReference))* 
		'{' fields += Field* '}'
;

DeclarationReference:
	ref = [Declaration]
;

Field:
	comment = ML_COMMENT? (restrictions += Restriction | hints += Hint)* 
	fieldcontent = Fieldcontent ';'
;

Fieldcontent:
	Constant | Data
;

Restriction:
	'@' restrictionName = ID 
	('(' (restrictionArguments += R_ARG (',' restrictionArguments += R_ARG)*)?')')?
;

//TODO: Better name than list.
R_ARG:
	({Float} Float | {INT} INT | {STRING} STRING | (list += ID (=> ',' list += ID)*))
;

Hint:
	'!' hintName = ID
;

Constant:
	'const' fieldtype = Fieldtype name = ID '=' value = INT
;

Data:
	(isAuto ?= 'auto')? fieldtype = Fieldtype name = ID
;

Fieldtype:
	Maptype| Settype | Listtype | Arraytype | Basetype
;

Maptype:
	'map' '<' basetypes += Basetype (',' basetypes += Basetype)+ '>'
;

Settype:
	'set' '<' basetype = Basetype '>'
;

Listtype:
	'list' '<' basetype = Basetype '>'
;

Arraytype:
	basetype = Basetype ('[' INT? ']')
;

//TODO: ANNOTATION
Basetype:
	(ref = [Usertype]) | BuildInType
;

BuildInType:
	 ( {Integerconstant} 'i8' | {Integerconstant} 'i16' | {Integerconstant} 'i32' | {Integerconstant}  'i64' | {Integerconstant} 'v64'   
		| {Floatconstant} 'f32' | {Floatconstant} 'f64' | {Stringconstant} 'string' | {Booleanconstant} 'bool'
	)
;


terminal
HEADCOMMENT:
	'#' !('\r'|'\n')* '\r'? '\n'
;

//TODO: CORRECT ID
terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
//TODO: CORRECT INTEGER AND HEXINTEGER
terminal INT returns ecore::EInt: ('0'..'9')+;
//TODO: CORRECT FLOAT
Float returns ecore::EFloat: INT '.' INT;
terminal STRING	: '"' -> '"'; 
terminal ML_COMMENT	: '/*' -> '*/';

terminal WHITESPACE			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
