/** 
 * Xtext grammar for SKilL (NOT FINISHED YET)
 * TODO: Add missing stuff and replace predefined Terminals.
 * @author Marco Link
 */

grammar de.unistuttgart.iste.ps.skilled.SKilL hidden (WHITESPACE)
generate sKilL "http://www.unistuttgart.de/iste/ps/skilled/SKilL"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


File:
	(headComments += HEADCOMMENT)* (includes += Include)*  (declarations += Declaration)*
;

Include:
	('include' | 'with') (includeFiles += IncludeFile)+
;

IncludeFile:
	importURI = STRING
;

Declaration:
	Typedef |  Enumtype | Interfacetype | Usertype 
;

Typedef:
	comment = ML_COMMENT? 'typedef' name = ID 
	(restrictions += Restriction | hints += Hint)* fieldtype = Fieldtype ';'
;

Enumtype : 
	comment = ML_COMMENT? 
	'enum' name = ID '{' instances += ID (',' instances += ID)* ';' (fields += Field)* '}'
;

Interfacetype:
	comment = ML_COMMENT? 
	'interface' name = ID ((':' | 'with' | 'extends') (supertypes += DeclarationReference))*
	'{' (fields += Field)* '}'
;

Usertype:
	comment = ML_COMMENT? (restrictions += Restriction | hints += Hint)* 
	name = ID ((':' | 'with' | 'extends') (supertypes += DeclarationReference))* 
		'{' fields += Field* '}'
;

DeclarationReference:
	type = [Declaration]
;

Field:
	comment = ML_COMMENT? (restrictions += Restriction | hints += Hint)* 
	fieldcontent = Fieldcontent ';'
;

Fieldcontent:
	Constant | Data
;

Restriction:
	'@' restrictionName = ID 
	('(' (restrictionArguments += R_ARG (',' restrictionArguments += R_ARG)*)?')')?
;

//TODO: Better name than list.
R_ARG:
	({Float} FLOAT | {INT} INT | {STRING} STRING | (list += ID (=> ',' list += ID)*))
;

Hint:
	'!' hintName = ID
;

Constant:
	'const' fieldtype = Fieldtype name = ID '=' value = INT
;

Data:
	(isAuto ?= 'auto')? fieldtype = Fieldtype name = ID
;

Fieldtype:
	Maptype| Settype | Listtype | Arraytype | Basetype
;

Maptype:
	'map' '<' basetypes += Basetype (',' basetypes += Basetype)+ '>'
;

Settype:
	'set' '<' basetype = Basetype '>'
;

Listtype:
	'list' '<' basetype = Basetype '>'
;

Arraytype:
	basetype = Basetype ('[' INT? ']')
;

Basetype:
	DeclarationReference | BuildInTypeReference
;

BuildInTypeReference:
	type = BuildInType
;

enum BuildInType:
	I8 = 'i8' | I16 = 'i16' | I32 = 'i32' | I64 = 'i64' | V64 = 'v64' 
	| F32 = 'f32' | F64 = 'f64' | STRING = 'string' | BOOLEAN = 'bool' | ANNOTATION = 'annotation'
;

terminal
HEADCOMMENT:
	'#' !('\r'|'\n')* '\r'? '\n'
;

terminal ID:
	('a' .. 'z' | 'A' .. 'Z' | '_' | '\u007f' .. '\uffff') ('a'..'z'|'A'..'Z'|'_'|'0'..'9' | '\u007f' .. '\uffff')*		
;

terminal INT returns ecore::EInt:
	'-'? DIGIT+
;

terminal FLOAT returns ecore::EFloat:
	(INT EXPONENT) | (INT '.' DIGIT* EXPONENT?)	
;

terminal fragment DIGIT:
	'0'..'9'
;

terminal fragment EXPONENT:
	('e' | 'E') ('+' | '-')? DIGIT+
;

terminal STRING	: '"' -> '"'; 
terminal ML_COMMENT	: '/*' -> '*/';

terminal WHITESPACE			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
