/*
 * generated by Xtext
 */
package de.unistuttgart.iste.ps.skilled.ui.outline

import de.unistuttgart.iste.ps.skilled.sKilL.Declaration
import de.unistuttgart.iste.ps.skilled.sKilL.DeclarationReference
import de.unistuttgart.iste.ps.skilled.sKilL.Enumtype
import de.unistuttgart.iste.ps.skilled.sKilL.Fieldcontent
import de.unistuttgart.iste.ps.skilled.sKilL.Fieldtype
import de.unistuttgart.iste.ps.skilled.sKilL.File
import de.unistuttgart.iste.ps.skilled.sKilL.TypeDeclaration
import de.unistuttgart.iste.ps.skilled.sKilL.Typedef
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode

/**
 * This class defines the Outline of the Skill-Files
 * @author Ken Singer
 */
class SKilLOutlineTreeProvider extends DefaultOutlineTreeProvider {

	/**
	 * creates the Nodes for the usertypes, interfaces and typedefs
	 */
	def protected _createChildren(DocumentRootNode parentNode, File modelElement) {
		for (declaration : modelElement.declarations) {
			createNode(parentNode, declaration)
		}
	}

	/**
	 * creates the nodes for the fields of the the declarations
	 */
	def protected _createChildren(IOutlineNode parentNode, Declaration modelElement) {

		if (modelElement instanceof TypeDeclaration)
			for (field : modelElement.fields) {
				createNode(parentNode, field.fieldcontent)
			}

		if (modelElement instanceof Typedef) {
			_createChildren(parentNode, modelElement.fieldtype)
		}
		if (modelElement instanceof Enumtype)
			for (f : modelElement.fields) {
				createNode(parentNode, f.fieldcontent)
			}

	}

	/**
	 * creates the nodes for fields if fieldtype is a declaration
	 */
	def protected _createChildren(IOutlineNode parentNode, Fieldtype modelElement) {
		if (modelElement instanceof DeclarationReference) {
			createNode(parentNode, modelElement.type)
		}
	}

	/**
	 * defines which tree-element is a leaf-element, to disable expansion of that tree-element
	 */
	override protected _isLeaf(EObject modelElement) {
		if (modelElement instanceof Fieldcontent || modelElement instanceof DeclarationReference) {
			return true
		} else if (modelElement instanceof TypeDeclaration) {
			return modelElement.fields.empty
		} else if (modelElement instanceof Typedef) {
			return ( !(modelElement.fieldtype instanceof DeclarationReference))
		}
		return false

	}
}